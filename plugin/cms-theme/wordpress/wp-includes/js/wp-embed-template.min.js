ation of the cursor,
        // making sure that the context menu itself doesn't fall outside the window
        $theContextMenu.css("display", "block");

        var contextWidth = $theContextMenu.outerWidth();
        var contextHeight = $theContextMenu.outerHeight();

        if(contextWidth + e.pageX > window.innerWidth){
            $theContextMenu.css('left', (e.pageX - contextWidth) + 'px');
        }else{
            $theContextMenu.css("left", e.pageX + "px");
        }

        if(contextHeight + e.pageY > window.innerHeight){
            $theContextMenu.css('top', (e.pageY - contextHeight) + 'px');
        }else{
            $theContextMenu.css("top", e.pageY + "px");
        }

        //When another element on the body has been clicked, hide the context menu,
        // remove styles and then unbind this handler
        $body.click(function(e){
            if (!$(e.originalEvent.target).hasClass('actionsIcon')){
                document.getElementById('contextMenu').style.display = 'none';
                document.getElementById('orientation').style.display = 'none';
                $body.unbind('click');

                // Also, make sure the options panel doesn't remain displayed
                if (($optsPanel != undefined) && ($optsPanel != false)){
                    $optsPanel.removeClass('activeOptsPanel activeActionButton');
                }
            }
        });
    }

    window.contextMenuClick = contextMenuClick;

    //Register what areas of the page have a context menu
    document.getElementById('ySeparator').addEventListener('contextmenu', contextMenuClick);
    document.getElementById('xSeparator').addEventListener('contextmenu', contextMenuClick);

    $p3Container.find('#shortcutsBody').find('#customList li').on('contextmenu', contextMenuClick);
    $p3Container.find('#shortcutsBody').find('#linksList li').on('contextmenu', contextMenuClick);

    // For the file items' context menu, save memory by only binding the event listener to the main viewPanel
    // instead of each file item.  This triggers "delegation mode" and the event is only fired for items of
    // class 'boxWrapper'
    // User "right"-clicked in an MRU item:
    $viewPanel.on('contextmenu', '.mruitem', contextMenuClick);
    $viewPanel.on('contextmenu', contextMenuClick);

    //Handler for any elements that have the class "tooltip".
    //Detects if the element has an ellipsis and if so displays a tooltip with the complete html text
    // or detects if the element is deliberately flagged as a tooltip and handles the various
    // data paramters allowed
    window.tooltipHandler = function($e){
        if(window.modalOpen){
            window.modalOpen = false;
            return;
        }

        var $this = $($e.currentTarget);
        var pos = $this.offset();
        var mousemove = false;

        //Register mouseleave event ASAP (further down in the method and
        // you risk never declaring it and ending up with a stuck tooltip
        $this.mouseleave(function(){
         